@let(commentTypeId = $props.commentTypeId ?? CommentTypes.POST)
@let(commentable = $props.commentable)
@let(parent = $props.parent)
@let(levelIndex = $props.levelIndex ?? 0)
@let(level = comments.filter((comment) => comment.replyTo == parent?.id))

<ol {{
  html.attrs({
    'x-data': levelIndex === 0 ? 'comments' : null,
    class: ['list-none', { 
      'pl-3 lg:pl-6 ml-0 relative': levelIndex === 1,
    }]
  })
}}>
  @if (levelIndex === 1 && level.length)
    <div class="absolute left-3 lg:left-6 top-0 rotate-180 w-px h-full bg-base-100"></div>
  @endif

  @if ($slots.before)
    {{{ await $slots.before({ level }) }}}
  @endif

  @each (comment in _.orderBy(level, (item) => item.userVotes.length, ['desc']))
    <li {{ html.attrs({ class: ['relative', { 'border-t first:border-t-0 border-base-100 -mt-px': levelIndex === 0 }] }) }}>
      @comment.card({ comment, parent, commentable, levelIndex, solved: commentable.solvedCommentId === comment.id })
        @slot('actions', scope)
          @if ($slots.actions)
            {{{ await $slots.actions(scope) }}}
          @endif
        @endslot
      @end

      @comment.list({ commentTypeId, commentable, comments, parent: comment, levelIndex: levelIndex + 1 })
        @slot('before')
          @can('CommentPolicy.reply', comment)
            <template x-if="createId === {{ comment.id }}">
              <li class="pb-6 pt-3 pl-3 border-b border-base-100">
                @!comment.form({
                  commentTypeId,
                  rootParentId: comment.rootParentId,
                  replyingTo: comment,
                  commentable,
                  levelIndex,
                })
              </li>
            </template>
          @endcan
        @endslot

        @slot('actions', scope)
          @if ($slots.actions)
            {{{ await $slots.actions(scope) }}}
          @endif
        @endslot
      @end
    </li>
  @endeach

  @if ($slots.after)
    {{{ await $slots.after({ level }) }}}
  @endif
</ol>
