@let(isOp = $props.commentable?.showOp && $props.commentable.authorId === comment.author?.id)
@let(solved = $props.solved ?? false)
@let(sizes = new Map([
  ['sm', {
    title: 'text-base @xl:text-lg',
    byline: 'text-base',
  }],
  ['md', {
    title: 'text-xl @xl:text-2xl',
    byline: 'text-base'
  }]
]))

@let(size = sizes.get($props.size ?? 'sm'))

@card({
  id: `comment${comment.id}`,
  accent: '',
  class: ['group overflow-visible pb-3', { 'card-border border-success': solved, 'border-x-0 border-t-0 rounded-none border-b last:!border-b-0': !solved }],
  ':class': "{ 'outline outline-primary': window.location.hash === `#${$el.id}` }",
  'x-init': 'typeof up !== undefined && window.location.hash === `#${$el.id}` && up?.reveal($el, { top: true, behavior: \'smooth\' })'
})
  @if (parent)
    <div class="flex items-center bg-base-100/10 border border-r border-t-0 border-base-100 rounded-br-box py-2 px-4 -mt-px w-[calc(100%_+_2px)] gap-1.5 text-xs text-base-content/60 relative z-10">
      @svg('solar:reply-bold', { class: 'w-8 rotate-180' })
      Responding to {{ parent.author?.username ?? 'anonymous' }}
    </div>
  @endif

  <div x-show="editId !== {{ comment.id }}" class="card-body flex flex-row flex-wrap xl:flex-nowrap gap-6">
    <div class="w-full max-w-full -mb-2">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-x-1.5 mb-4">
          @if (comment.author)
            @profile.link({ user: comment.author, class: ['flex gap-1', 'items-center'] })
              <div class="avatar mr-1.5">
                <div class="w-8 sm:w-6 rounded">
                  @!user.avatar({ user: comment.author, loading: 'lazy', alt: comment.author?.handle ?? 'Anonymous user' })
                </div>
              </div>
            @end
          @else
            <div class="avatar mr-1.5">
              <div class="w-6 rounded">
                @!user.avatar({ user: comment.author, loading: 'lazy', alt: comment.author?.handle ?? 'Anonymous user' })
              </div>
            </div>
          @endif
          <div class="{{ html.classNames(['flex gap-x-1.5 flex-col sm:flex-row sm:items-center', size.byline]) }}">
            <div class="flex gap-x-1.5 items-center">
              @if (comment.author)
                @profile.link({ user: comment.author, class: ['flex gap-1', 'items-center'] })
                  <span>
                    {{ comment.author.handle }}
                  </span>

                  @if (!comment.author.isFreeTier)
                    <span class="h-2.5 relative ml-1">
                      <img class="h-full" src="/imgs/plus-badge-100.png" alt="Adocasts Plus" />
                    </span>
                  @endif

                  @if (isOp)
                    <div class="badge badge-xs badge-dash badge-secondary ml-1">OP</div>
                  @endif
                @end
              @else
                <div class="flex gap-1 items-center">
                  Anonymous
                  @if (comment.name)
                    <span class="opacity-60">({{ comment.name }})</span>
                  @endif
                </div>
              @endif
            </div>

            <span class="text-primary relative hidden sm:block">
              @svg('solar:double-alt-arrow-right-broken', { class: 'w-4 h-4' })
            </span>

            <span class="flex-none opacity-60 text-xs sm:text-sm">
              <time datetime="{{ comment.createdAt }}">{{ TimeService.timeago(comment.createdAt) }}</time>
            </span>
          </div>
        </div>

        @if (solved)
          <div class="absolute top-0 right-0 md:static">
            <div class="badge badge-outline badge-success">Answer</div>
          </div>
        @endif
      </div>

      @if (comment.body)
        <article class="prose max-w-4xl">
          {{{ await parser.highlight(comment.body) }}}
        </article>
      @endif

      <div class="w-full mt-6">
        <div class="w-full flex items-end gap-4 justify-between text-sm">
          <div class="flex flex-wrap items-center gap-2 btn-inner-xs">
            @!frags.comment.vote({ comment })

            @if ($slots.actions)
              {{{ await $slots.actions({ comment }) }}}
            @endif

            <div class="flex items-center gap-2 opacity-0 no-hover:opacity-100 group-hover:opacity-100">
              @can('CommentPolicy.reply', comment)
                <button class="btn btn-outline btn-sm" @click="create({{ comment.id }})">
                  Reply
                </button>
              @endcan

              @can('CommentPolicy.update', comment)
                <button class="btn btn-outline btn-primary btn-sm" @click="edit({{ comment.id }})">
                  Edit
                </button>
              @endcan

              @can('CommentPolicy.delete', comment)
                @form({
                  action: form.delete('comments.destroy', { id: comment.id }),
                  'up-confirm': `Are you sure you'd like to delete your comment?`,
                  'up-target': '[up-comments]',
                  'up-scroll': 'preserve',
                })
                  <button type="submit" class="btn btn-outline btn-error btn-sm">
                    Delete
                  </button>
                @end
              @endcan
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  @can('CommentPolicy.update', comment)
    <template x-if="editId === {{ comment.id }}">
      @!comment.form({
        commentTypeId: CommentTypes.POST,
        rootParentId: comment.rootParentId,
        levelIndex: comment.levelIndex,
        record: comment,
      })
    </template>
  @endcan
@end
