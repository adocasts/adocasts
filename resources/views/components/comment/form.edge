@let(commentable = $props.commentable)
@let(record = $props.record)
@let(levelIndex = $props.levelIndex ?? 0)
@let(rootParentId = $props.rootParentId)
@let(replyingTo = $props.replyingTo)
@let(commentTypeId = $props.commentTypeId ?? CommentTypes.POST)
@let(body = old('body', $props.body ?? record?.body ?? ''))
@let(ability = 'CommentPolicy.store')
@let(action = record ? route('comments.update', { id: record.id }, { qs: { _method: 'PUT' } }) : route('comments.store'))

@form({ action, loadable: true, class: $props.class, 'up-disable': 'true', 'up-scroll': 'preserve' })

  <input type="hidden" name="levelIndex" value="{{ levelIndex }}">

  @if (commentable)
    <input type="hidden" name="{{ CommentTypeIdColumn[commentTypeId] }}" value="{{ commentable.id }}">
  @endif

  @if (rootParentId)
    <input type="hidden" name="rootParentId" value="{{ rootParentId }}">
  @endif

  @if (replyingTo)
    @assign(ability = 'CommentPolicy.reply')
    <input type="hidden" name="replyTo" value="{{ replyingTo.id }}">
  @endif

  @authorization.provider({ ability, resource: replyingTo })
    @tiptap({ value: body, wrapClass: 'comment-form comment-wrap', class: 'prose-comment' })
      @slot('before')
        <div class="has-[[up-auth-modal]]:hidden comment-avatar">
          <div class="avatar">
            <div class="w-6 rounded">
              @!user.avatar({ user: auth.user, loading: 'lazy', alt: auth.user?.handle })
            </div>
          </div>
        </div>

        @if (auth.user)
          <div class="comment-info flex gap-1 items-baseline">
            <span>{{ auth.user.handle }}</span>

            @if (!auth.user.isFreeTier)
              <span class="h-2.5 relative ml-1">
                <img class="h-full" src="/imgs/plus-badge-100.png" alt="Adocasts Plus">
              </span>
            @endif
          </div>
        @endif
      @endslot

      @slot('after', props)
        @if (props.allows)
          <div class="comment-actions flex justify-end gap-3">
            @if (replyingTo || record)
              <button type="button" class="btn btn-outline" @click.prevent="cancel">
                Cancel
              </button>
            @endif

            <button type="submit" class="btn btn-outline btn-primary" :disabled="sending">
              <span x-show="sending" x-cloak>
                @svg('svg-spinners:blocks-shuffle-3', { class: 'w-5 h-5 -ml-1 -my-1' })
                {{ record ? 'Updating' : 'Sharing' }} ...
              </span>
              <span x-show="!sending" class="flex gap-3 items-center">
                @let(icon = replyingTo ? 'solar:chat-square-arrow-outline' : 'solar:chat-round-line-outline')
                @svg(icon, { class: 'w-5 h-5 -ml-1 -my-1' })
                {{ record ? 'Update' : 'Share' }} Comment
              </span>
            </button>
          </div>
        @endif
      @endslot
    @end
  @end
@end
