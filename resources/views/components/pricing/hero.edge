@let(container = $props.container ?? 'container mx-auto')
@let(containerCards = $props.containerCards ?? container)
@let(cardAccent = $props.cardAccent)

<div {{ html.attrs({ class: ['max-lg:text-center', container] }) }}>
  <h1 class="heading-2">
    Launch into Adocasts Plus
  </h1>

  <p class="mb-12 max-w-2xl text-pretty font-medium opacity-60 max-lg:mx-auto sm:text-lg/8">
    Get access to all the tools, tips, and real-world knowledge to build with confidence.
    Just choose the plan that fits you best.
  </p>

  <div class="mt-8">
    <ul class="mt-3 columns-3 max-w-[1100px] space-y-3">
      @!pricing.feature.line({ icon: 'solar:lock-password-unlocked-outline', text: 'Unlock all series, lessons, and assets' })
      @!pricing.feature.line({ icon: 'solar:clock-circle-outline', text: '2 weeks early access to new free lessons' })
      @!pricing.feature.line({ icon: 'solar:download-minimalistic-outline', text: 'Download lessons to watch offline anytime' })
      @!pricing.feature.line({ icon: 'solar:code-outline', text: 'Access to series source code' })
      @!pricing.feature.line({ icon: 'solar:help-outline', text: 'Priority lesson support' })
      @!pricing.feature.line({ icon: 'solar:power-outline', text: 'Renewal reminders; cancel anytime' })
    </ul>
  </div>
</div>
<div class="relative pt-12 sm:pt-16">
  @if (testimonials)
    <div class="absolute inset-x-0 bottom-0 top-48 bg-radial-[at_50%_150%] from-secondary/50 to-secondary/0">
      <div class="w-full h-full bg-gradient-to-b from-base-300 via-base-300/0 to-base-300/0"></div>
    </div>
  @endif

  <div {{ html.attrs({ class: ['relative', containerCards] }) }}>
    <div class="grid grid-cols-1 gap-10 lg:grid-cols-3">
      @!pricing.card({
        name: 'Monthly',
        accent: cardAccent,
        plan: await PlanService.get(Plans.PLUS_MONTHLY),
        description: 'Just getting started? Try Adocasts Plus on a month-by-month basis and unlock everything instantly with no strings attached.',
        cta: 'Start Monthly',
      })

      @!pricing.card({
        name: 'Annual',
        accent: cardAccent,
        plan: await PlanService.get(Plans.PLUS_ANNUAL),
        description: 'Ready to level up your Node game? Go annual and save big while accessing all premium content, all year long.',
        cta: 'Go Annual',
      })

      @!pricing.card({
        name: 'Forever',
        accent: cardAccent,
        plan: await PlanService.get(Plans.FOREVER),
        description: 'All-in forever? One-time payment, lifetime access. Everything we make, now and in the future, is yours.',
        cta: 'Unlock Forever',
      })
    </div>
  </div>

  @if (testimonials)
    <div
      x-data
      x-init="
        $nextTick(() => {
          const content = $refs.content;
          const item = $refs.item;
          const clone = item.cloneNode(true);
          content.appendChild(clone);
          content.style.width = item.offsetWidth + 'px';
        });
      "
      class="relative w-full container-block py-12 sm:py-16"
    >
      <div class="relative w-full py-3 mx-auto overflow-hidden text-lg italic tracking-wide text-white sm:text-xs md:text-sm lg:text-lg">
        <div x-ref="content" class="flex animate-marquee animate-duration-[20s]">
          <div x-ref="item" class="flex items-center justify-around flex-shrink-0 py-2 text-white divide-x divide-secondary/10 border-r border-secondary/10">
            @!pricing.testimonial()
            @!pricing.testimonial()
            @!pricing.testimonial()
            @!pricing.testimonial()
            @!pricing.testimonial()
          </div>
        </div>
      </div>
    </div>
  @endif
</div>
